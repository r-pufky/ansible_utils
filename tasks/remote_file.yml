---
# yamllint disable rule:line-length
# Explicitly test remote file before applying file changes.
#
# Settings permissions via octal (0755) vs symbolic (u=,g=,o=...) results in
# plowing file permissions without checking first.
#
# Remote filesystems typically do not have the same or allow the root user to
# plow those file permissions (e.g. NFS squashed root or containers). Becoming
# 'root' locally results in the root user mapped to nobody/nogroup, effectively
# locking the task out of modifying permissions even if NO change is required.
#
# This results in ansible stack dumps that are hard to debug due to multiple
# system layers on top of vague error messaging from ansible, when simply
# setting file permissions (especially when it is pre-existing with correct
# permissions).
#
# Args:
#   file_path: str - Path to file.
#   file_owner: str or int - File owner.
#   file_group: str or int - File group.
#   file_mode: str - File mode.
#   file_recurse: bool - Enable recursive attribute setting.
#   file_state: str - File state.
#   file_diff: bool - Enable diff display. Default: False.
#
# Reference:
# * https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html

- name: 'Remote file | check {{ file_path }}'
  become: true
  ansible.builtin.file:
    path: '{{ file_path }}'
    owner: '{{ file_owner }}'
    group: '{{ file_group }}'
    mode: '{{ file_mode }}'
    state: '{{ file_state }}'
  check_mode: true
  diff: '{{ file_diff | default(false) }}'
  register: _utils_test

- name: 'Remote file | change {{ file_path }}'
  when: _utils_test.changed  # noqa no-handler execute immediately.
  become: true
  ansible.builtin.file:
    path: '{{ file_path }}'
    owner: '{{ file_owner }}'
    group: '{{ file_group }}'
    recurse: '{{ file_recurse }}'
    mode: '{{ file_mode }}'
    state: '{{ file_state }}'
  changed_when: not file_recurse  # https://github.com/ansible/ansible/issues/32636
